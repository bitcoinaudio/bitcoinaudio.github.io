"use strict";
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const babel_traverse_1 = require("babel-traverse");
const babel = require("babel-types");
const polymer_analyzer_1 = require("polymer-analyzer");
const registry_1 = require("../registry");
const rule_1 = require("../rule");
const util_1 = require("../util");
class DomCallsToNative extends rule_1.Rule {
    constructor() {
        super(...arguments);
        this.code = 'dom-calls-to-native';
        this.description = util_1.stripIndentation(`
      Warns when the Polymer.dom is used in places where native
      methods can now be used instead.

        Polymer.dom(event).path

      Accepted syntax:

        event.composedPath()
  `);
        this._replacements = new Map([
            ['localTarget', 'target'],
            ['rootTarget', 'composedPath()[0]'],
            ['path', 'composedPath()']
        ]);
    }
    check(document) {
        return __awaiter(this, void 0, void 0, function* () {
            const warnings = [];
            const docs = document.getFeatures({ kind: 'js-document' });
            for (const doc of docs) {
                babel_traverse_1.default(doc.parsedDocument.ast, {
                    noScope: true,
                    MemberExpression: (path) => {
                        if (!babel.isIdentifier(path.node.property)) {
                            return;
                        }
                        const name = path.node.property.name;
                        const replacement = this._replacements.get(name);
                        if (!this._isPolymerDomCall(path.node.object) ||
                            replacement === undefined) {
                            return;
                        }
                        const containingDoc = util_1.getDocumentContaining(doc.sourceRange, document);
                        if (!containingDoc) {
                            return;
                        }
                        const sourceRange = containingDoc.sourceRangeForNode(path.node);
                        if (sourceRange === undefined) {
                            return;
                        }
                        warnings.push(new polymer_analyzer_1.Warning({
                            parsedDocument: document.parsedDocument,
                            code: 'deprecated-dom-call',
                            severity: polymer_analyzer_1.Severity.WARNING, sourceRange,
                            message: util_1.stripWhitespace(`
              Polymer.dom no longer needs to be called for "${name}",
              instead "event.${replacement}" may be used.
            `)
                        }));
                    }
                });
            }
            return warnings;
        });
    }
    _isPolymerDomCall(expr) {
        return babel.isCallExpression(expr) &&
            babel.isMemberExpression(expr.callee) &&
            babel.isIdentifier(expr.callee.object) &&
            babel.isIdentifier(expr.callee.property) &&
            expr.callee.object.name === 'Polymer' &&
            expr.callee.property.name === 'dom';
    }
}
registry_1.registry.register(new DomCallsToNative());
//# sourceMappingURL=dom-calls-to-native.js.map