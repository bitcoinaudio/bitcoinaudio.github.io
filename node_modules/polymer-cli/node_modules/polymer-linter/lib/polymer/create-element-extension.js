"use strict";
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const babel_traverse_1 = require("babel-traverse");
const babel = require("babel-types");
const polymer_analyzer_1 = require("polymer-analyzer");
const registry_1 = require("../registry");
const rule_1 = require("../rule");
const util_1 = require("../util");
class CreateElementExtension extends rule_1.Rule {
    constructor() {
        super(...arguments);
        this.code = 'create-element-extension';
        this.description = util_1.stripIndentation(`
    Warns when using the second parameter of createElement for element extension using the is attribute.
  `);
    }
    check(document) {
        return __awaiter(this, void 0, void 0, function* () {
            const warnings = [];
            const docs = document.getFeatures({ kind: 'js-document' });
            for (const doc of docs) {
                babel_traverse_1.default(doc.parsedDocument.ast, {
                    noScope: true,
                    CallExpression: (path) => {
                        if (!this.isExtendingElementCall(path.node)) {
                            return;
                        }
                        const containingDoc = util_1.getDocumentContaining(doc.sourceRange, document);
                        if (containingDoc === undefined) {
                            return;
                        }
                        const sourceRange = containingDoc.sourceRangeForNode(path.node.arguments[1]);
                        if (sourceRange === undefined) {
                            return;
                        }
                        if (babel.isStringLiteral(path.node.arguments[1])) {
                            warnings.push(new polymer_analyzer_1.Warning({
                                parsedDocument: document.parsedDocument,
                                code: 'create-element-string-extension',
                                severity: polymer_analyzer_1.Severity.WARNING, sourceRange,
                                message: util_1.stripWhitespace(`
                document.createElement with a custom element tagname as the second parameter is deprecated.
              `)
                            }));
                        }
                        else {
                            warnings.push(new polymer_analyzer_1.Warning({
                                parsedDocument: document.parsedDocument,
                                code: 'create-element-is-property-extension',
                                severity: polymer_analyzer_1.Severity.WARNING, sourceRange,
                                message: util_1.stripWhitespace(`
                Creating a custom element extension of a built-in element is not widely supported, and is not recommended.
              `)
                            }));
                        }
                    },
                });
            }
            return warnings;
        });
    }
    isExtendingElementCall(expr) {
        return babel.isCallExpression(expr) &&
            babel.isMemberExpression(expr.callee) &&
            babel.isIdentifier(expr.callee.object) &&
            expr.callee.object.name === 'document' &&
            babel.isIdentifier(expr.callee.property) &&
            expr.callee.property.name === 'createElement' &&
            expr.arguments.length === 2;
    }
}
registry_1.registry.register(new CreateElementExtension());
//# sourceMappingURL=create-element-extension.js.map