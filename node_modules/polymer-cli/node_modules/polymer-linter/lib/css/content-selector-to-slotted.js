"use strict";
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const polymer_analyzer_1 = require("polymer-analyzer");
const shady = require("shady-css-parser");
const rule_1 = require("../css/rule");
const registry_1 = require("../registry");
const util_1 = require("../util");
class ContentToSlottedUsages extends rule_1.CssRule {
    constructor() {
        super(...arguments);
        this.code = 'content-selector-to-slotted';
        this.description = util_1.stripIndentation(`
      Warns when using deprecated ::content pseudo-element.
  `);
    }
    checkDocument(parsedDocument, _document) {
        return __awaiter(this, void 0, void 0, function* () {
            const warnings = [];
            for (const node of parsedDocument) {
                if (node.type === shady.nodeType.ruleset) {
                    const deprecatedRegex = /::content/;
                    const match = node.selector.match(deprecatedRegex);
                    if (match !== null) {
                        const combinatorOffset = match.index;
                        const start = node.range.start + combinatorOffset;
                        const end = start + match[0].length;
                        const sourceRange = parsedDocument.sourceRangeForShadyRange({ start, end });
                        let fix;
                        // Safe fix only if we know the selector is immediate descendant
                        const safeFixRegex = /::content\s*>\s*([^\s]+)$/;
                        const descendantSelectorMatch = node.selector.match(safeFixRegex);
                        if (descendantSelectorMatch !== null) {
                            const descendantSelectorIndex = node.selector.indexOf(descendantSelectorMatch[1]);
                            fix = [
                                {
                                    range: parsedDocument.sourceRangeForShadyRange({ start, end: node.range.start + descendantSelectorIndex }),
                                    replacementText: '::slotted('
                                },
                                {
                                    range: parsedDocument.sourceRangeForShadyRange({
                                        start: node.range.start + descendantSelectorIndex +
                                            descendantSelectorMatch[1].length,
                                        end: node.range.start + descendantSelectorIndex +
                                            descendantSelectorMatch[1].length
                                    }),
                                    replacementText: ')'
                                }
                            ];
                        }
                        warnings.push(new polymer_analyzer_1.Warning({
                            code: 'content-selector-to-slotted',
                            severity: polymer_analyzer_1.Severity.WARNING, parsedDocument, sourceRange,
                            message: 'The ::content pseudo-element has been deprecated in favor of ' +
                                'the ::slotted psuedo-element in ShadowDOM v1.',
                            fix
                        }));
                    }
                }
            }
            return warnings;
        });
    }
}
registry_1.registry.register(new ContentToSlottedUsages());
//# sourceMappingURL=content-selector-to-slotted.js.map