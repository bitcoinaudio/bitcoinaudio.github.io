"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const bundler_1 = require("../bundler");
const test_utils_1 = require("./test-utils");
suite('import.meta.url', () => {
    const analyzer = test_utils_1.inMemoryAnalyzer({
        'a.js': `
      const myUrl = import.meta.url;
      export {myUrl};
    `,
        'subfolder/b.js': `
      import {myUrl as aUrl} from '../a.js';
      const bundledImportMeta = 'Potential naming conflict!';
      const myUrl = import.meta.url;
      export {myUrl, aUrl, bundledImportMeta as bDefinedImportMeta};
    `,
        'c.js': `
      import {aUrl, myUrl as bUrl, bDefinedImportMeta} from './subfolder/b.js';
      const myMeta = import.meta;
      export {aUrl, bUrl, myMeta};
    `,
    });
    const aUrl = analyzer.resolveUrl('a.js');
    const bUrl = analyzer.resolveUrl('subfolder/b.js');
    const cUrl = analyzer.resolveUrl('c.js');
    test('bundled module with same URL as bundle', () => __awaiter(this, void 0, void 0, function* () {
        const bundler = new bundler_1.Bundler({ analyzer });
        const aDoc = (yield analyzer.analyze([aUrl])).getDocument(aUrl);
        const { documents } = yield bundler.bundle(yield bundler.generateManifest([aUrl]));
        chai_1.assert.deepEqual(documents.get(aUrl).content, test_utils_1.heredoc `
        const myUrl = import.meta.url;
        var a = {
          myUrl: myUrl
        };
        export { a as $a, myUrl };`);
    }));
    test('corrected import.meta.url for bundled import', () => __awaiter(this, void 0, void 0, function* () {
        const bundler = new bundler_1.Bundler({ analyzer });
        const { documents } = yield bundler.bundle(yield bundler.generateManifest([bUrl]));
        chai_1.assert.deepEqual(documents.get(bUrl).content, test_utils_1.heredoc `
      const bundledImportMeta = { ...import.meta,
        url: new URL('../a.js', import.meta.url).href
      };
      const myUrl = bundledImportMeta.url;
      var a = {
        myUrl: myUrl
      };
      const bundledImportMeta$1 = 'Potential naming conflict!';
      const myUrl$1 = import.meta.url;
      var b = {
        myUrl: myUrl$1,
        aUrl: myUrl,
        bDefinedImportMeta: bundledImportMeta$1
      };
      export { a as $a, b as $b, myUrl as myUrl$1, myUrl$1 as myUrl, myUrl as aUrl, bundledImportMeta$1 as bDefinedImportMeta };`);
    }));
    test('multiple corrected import.meta.url values', () => __awaiter(this, void 0, void 0, function* () {
        const bundler = new bundler_1.Bundler({ analyzer });
        const { documents } = yield bundler.bundle(yield bundler.generateManifest([cUrl]));
        chai_1.assert.deepEqual(documents.get(cUrl).content, test_utils_1.heredoc `
      const bundledImportMeta = { ...import.meta,
        url: new URL('./a.js', import.meta.url).href
      };
      const myUrl = bundledImportMeta.url;
      var a = {
        myUrl: myUrl
      };
      const bundledImportMeta$1 = { ...import.meta,
        url: new URL('./subfolder/b.js', import.meta.url).href
      };
      const bundledImportMeta$2 = 'Potential naming conflict!';
      const myUrl$1 = bundledImportMeta$1.url;
      var b = {
        myUrl: myUrl$1,
        aUrl: myUrl,
        bDefinedImportMeta: bundledImportMeta$2
      };
      const myMeta = import.meta;
      var c = {
        aUrl: myUrl,
        bUrl: myUrl$1,
        myMeta: myMeta
      };
      export { a as $a, c as $c, b as $b, myUrl, myUrl as aUrl, myUrl$1 as bUrl, myMeta, myUrl$1, myUrl as aUrl$1, bundledImportMeta$2 as bDefinedImportMeta };`);
    }));
});
//# sourceMappingURL=import-meta-url_test.js.map